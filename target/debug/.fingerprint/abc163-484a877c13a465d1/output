{"message":"an inner attribute is not permitted in this context","code":null,"level":"error","spans":[{"file_name":"src/bin/d.rs","byte_start":56,"byte_end":81,"line_start":4,"line_end":4,"column_start":1,"column_end":26,"is_primary":true,"text":[{"text":"#![recursion_limit=\"256\"]","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: an inner attribute is not permitted in this context\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/d.rs:4:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#![recursion_limit=\"256\"]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\u001b[0m\n\n"}
{"message":"recursion limit reached while expanding `$crate::input!`","code":null,"level":"error","spans":[{"file_name":"<::proconio::input macros>","byte_start":238,"byte_end":307,"line_start":5,"line_end":5,"column_start":3,"column_end":72,"is_primary":true,"text":[{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [] @ rest $ ($ rest) * } } ;","highlight_start":3,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::proconio::input macros>","byte_start":1873,"byte_end":1949,"line_start":45,"line_end":46,"column_start":65,"column_end":66,"is_primary":false,"text":[{"text":"      \"<https://github.com/statiolake/proconio-rs/issues>.\")) ; $ crate ::","highlight_start":65,"highlight_end":75},{"text":"    input ! { @ from [& mut * locked_stdin] @ rest $ ($ rest) * } drop","highlight_start":1,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::proconio::input macros>","byte_start":1001,"byte_end":1061,"line_start":26,"line_end":26,"column_start":14,"column_end":74,"is_primary":false,"text":[{"text":"     rest) ; $ crate :: input ! (@ from [$ source] @ rest $ ($ rest) *) ;","highlight_start":14,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::proconio::input macros>","byte_start":1207,"byte_end":1335,"line_start":31,"line_end":33,"column_start":5,"column_end":48,"is_primary":false,"text":[{"text":"    $ crate :: input !","highlight_start":5,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind","highlight_start":1,"highlight_end":62},{"text":"     [$ ($ kind) * $ tt] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::proconio::input macros>","byte_start":412,"byte_end":538,"line_start":9,"line_end":13,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    $ crate :: input !","highlight_start":5,"highlight_end":23},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [] @ rest $","highlight_start":1,"highlight_end":77},{"text":"        ($ rest) *","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::proconio::input macros>","byte_start":238,"byte_end":307,"line_start":5,"line_end":5,"column_start":3,"column_end":72,"is_primary":false,"text":[{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [] @ rest $ ($ rest) * } } ;","highlight_start":3,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"<::proconio::input macros>","byte_start":1873,"byte_end":1949,"line_start":45,"line_end":46,"column_start":65,"column_end":66,"is_primary":false,"text":[{"text":"      \"<https://github.com/statiolake/proconio-rs/issues>.\")) ; $ crate ::","highlight_start":65,"highlight_end":75},{"text":"    input ! { @ from [& mut * locked_stdin] @ rest $ ($ rest) * } drop","highlight_start":1,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/bin/d.rs","byte_start":98,"byte_end":147,"line_start":6,"line_end":9,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    input!{","highlight_start":5,"highlight_end":12},{"text":"        n: usize,","highlight_start":1,"highlight_end":18},{"text":"        k; usize,","highlight_start":1,"highlight_end":18},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"input!","def_site_span":{"file_name":"<::proconio::input macros>","byte_start":0,"byte_end":1979,"line_start":1,"line_end":48,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"(@ from [$ source : expr] @ rest) => { } ;","highlight_start":1,"highlight_end":43},{"text":"(@ from [$ source : expr] @ rest mut $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":59},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [mut] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":79},{"text":"(@ from [$ source : expr] @ rest $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":55},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":76},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ rest $ var : tt : $","highlight_start":1,"highlight_end":73},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [] @ rest $","highlight_start":1,"highlight_end":77},{"text":"        ($ rest) *","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest) =>","highlight_start":1,"highlight_end":32},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let $ ($ mut) * $ var = $ crate :: read_value !","highlight_start":1,"highlight_end":52},{"text":"    (@ source [$ source] @ kind [$ ($ kind) *]) ;","highlight_start":1,"highlight_end":50},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":51},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [$ ($ kind) *] @","highlight_start":1,"highlight_end":79},{"text":"     rest) ; $ crate :: input ! (@ from [$ source] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":74},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest $ tt : tt $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind","highlight_start":1,"highlight_end":62},{"text":"     [$ ($ kind) * $ tt] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":48},{"text":"} ; (from $ source : expr, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    # [allow (unused_variables, unused_mut)] let mut s = $ source ; $ crate ::","highlight_start":1,"highlight_end":79},{"text":"    input ! { @ from [& mut s] @ rest $ ($ rest) * }","highlight_start":1,"highlight_end":53},{"text":"} ; ($ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let mut locked_stdin = $ crate :: STDIN_SOURCE . lock () . expect","highlight_start":1,"highlight_end":70},{"text":"    (concat !","highlight_start":1,"highlight_end":14},{"text":"     (\"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":65},{"text":"      \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":72},{"text":"      \"Please report this issue from \",","highlight_start":1,"highlight_end":40},{"text":"      \"<https://github.com/statiolake/proconio-rs/issues>.\")) ; $ crate ::","highlight_start":1,"highlight_end":75},{"text":"    input ! { @ from [& mut * locked_stdin] @ rest $ ($ rest) * } drop","highlight_start":1,"highlight_end":71},{"text":"    (locked_stdin) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"<::proconio::input macros>","byte_start":0,"byte_end":1979,"line_start":1,"line_end":48,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"(@ from [$ source : expr] @ rest) => { } ;","highlight_start":1,"highlight_end":43},{"text":"(@ from [$ source : expr] @ rest mut $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":59},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [mut] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":79},{"text":"(@ from [$ source : expr] @ rest $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":55},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":76},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ rest $ var : tt : $","highlight_start":1,"highlight_end":73},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [] @ rest $","highlight_start":1,"highlight_end":77},{"text":"        ($ rest) *","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest) =>","highlight_start":1,"highlight_end":32},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let $ ($ mut) * $ var = $ crate :: read_value !","highlight_start":1,"highlight_end":52},{"text":"    (@ source [$ source] @ kind [$ ($ kind) *]) ;","highlight_start":1,"highlight_end":50},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":51},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [$ ($ kind) *] @","highlight_start":1,"highlight_end":79},{"text":"     rest) ; $ crate :: input ! (@ from [$ source] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":74},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest $ tt : tt $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind","highlight_start":1,"highlight_end":62},{"text":"     [$ ($ kind) * $ tt] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":48},{"text":"} ; (from $ source : expr, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    # [allow (unused_variables, unused_mut)] let mut s = $ source ; $ crate ::","highlight_start":1,"highlight_end":79},{"text":"    input ! { @ from [& mut s] @ rest $ ($ rest) * }","highlight_start":1,"highlight_end":53},{"text":"} ; ($ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let mut locked_stdin = $ crate :: STDIN_SOURCE . lock () . expect","highlight_start":1,"highlight_end":70},{"text":"    (concat !","highlight_start":1,"highlight_end":14},{"text":"     (\"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":65},{"text":"      \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":72},{"text":"      \"Please report this issue from \",","highlight_start":1,"highlight_end":40},{"text":"      \"<https://github.com/statiolake/proconio-rs/issues>.\")) ; $ crate ::","highlight_start":1,"highlight_end":75},{"text":"    input ! { @ from [& mut * locked_stdin] @ rest $ ($ rest) * } drop","highlight_start":1,"highlight_end":71},{"text":"    (locked_stdin) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"<::proconio::input macros>","byte_start":0,"byte_end":1979,"line_start":1,"line_end":48,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"(@ from [$ source : expr] @ rest) => { } ;","highlight_start":1,"highlight_end":43},{"text":"(@ from [$ source : expr] @ rest mut $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":59},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [mut] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":79},{"text":"(@ from [$ source : expr] @ rest $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":55},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":76},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ rest $ var : tt : $","highlight_start":1,"highlight_end":73},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [] @ rest $","highlight_start":1,"highlight_end":77},{"text":"        ($ rest) *","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest) =>","highlight_start":1,"highlight_end":32},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let $ ($ mut) * $ var = $ crate :: read_value !","highlight_start":1,"highlight_end":52},{"text":"    (@ source [$ source] @ kind [$ ($ kind) *]) ;","highlight_start":1,"highlight_end":50},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":51},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [$ ($ kind) *] @","highlight_start":1,"highlight_end":79},{"text":"     rest) ; $ crate :: input ! (@ from [$ source] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":74},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest $ tt : tt $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind","highlight_start":1,"highlight_end":62},{"text":"     [$ ($ kind) * $ tt] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":48},{"text":"} ; (from $ source : expr, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    # [allow (unused_variables, unused_mut)] let mut s = $ source ; $ crate ::","highlight_start":1,"highlight_end":79},{"text":"    input ! { @ from [& mut s] @ rest $ ($ rest) * }","highlight_start":1,"highlight_end":53},{"text":"} ; ($ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let mut locked_stdin = $ crate :: STDIN_SOURCE . lock () . expect","highlight_start":1,"highlight_end":70},{"text":"    (concat !","highlight_start":1,"highlight_end":14},{"text":"     (\"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":65},{"text":"      \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":72},{"text":"      \"Please report this issue from \",","highlight_start":1,"highlight_end":40},{"text":"      \"<https://github.com/statiolake/proconio-rs/issues>.\")) ; $ crate ::","highlight_start":1,"highlight_end":75},{"text":"    input ! { @ from [& mut * locked_stdin] @ rest $ ($ rest) * } drop","highlight_start":1,"highlight_end":71},{"text":"    (locked_stdin) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"<::proconio::input macros>","byte_start":0,"byte_end":1979,"line_start":1,"line_end":48,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"(@ from [$ source : expr] @ rest) => { } ;","highlight_start":1,"highlight_end":43},{"text":"(@ from [$ source : expr] @ rest mut $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":59},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [mut] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":79},{"text":"(@ from [$ source : expr] @ rest $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":55},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":76},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ rest $ var : tt : $","highlight_start":1,"highlight_end":73},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [] @ rest $","highlight_start":1,"highlight_end":77},{"text":"        ($ rest) *","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest) =>","highlight_start":1,"highlight_end":32},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let $ ($ mut) * $ var = $ crate :: read_value !","highlight_start":1,"highlight_end":52},{"text":"    (@ source [$ source] @ kind [$ ($ kind) *]) ;","highlight_start":1,"highlight_end":50},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":51},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [$ ($ kind) *] @","highlight_start":1,"highlight_end":79},{"text":"     rest) ; $ crate :: input ! (@ from [$ source] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":74},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest $ tt : tt $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind","highlight_start":1,"highlight_end":62},{"text":"     [$ ($ kind) * $ tt] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":48},{"text":"} ; (from $ source : expr, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    # [allow (unused_variables, unused_mut)] let mut s = $ source ; $ crate ::","highlight_start":1,"highlight_end":79},{"text":"    input ! { @ from [& mut s] @ rest $ ($ rest) * }","highlight_start":1,"highlight_end":53},{"text":"} ; ($ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let mut locked_stdin = $ crate :: STDIN_SOURCE . lock () . expect","highlight_start":1,"highlight_end":70},{"text":"    (concat !","highlight_start":1,"highlight_end":14},{"text":"     (\"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":65},{"text":"      \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":72},{"text":"      \"Please report this issue from \",","highlight_start":1,"highlight_end":40},{"text":"      \"<https://github.com/statiolake/proconio-rs/issues>.\")) ; $ crate ::","highlight_start":1,"highlight_end":75},{"text":"    input ! { @ from [& mut * locked_stdin] @ rest $ ($ rest) * } drop","highlight_start":1,"highlight_end":71},{"text":"    (locked_stdin) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"<::proconio::input macros>","byte_start":0,"byte_end":1979,"line_start":1,"line_end":48,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"(@ from [$ source : expr] @ rest) => { } ;","highlight_start":1,"highlight_end":43},{"text":"(@ from [$ source : expr] @ rest mut $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":59},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [mut] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":79},{"text":"(@ from [$ source : expr] @ rest $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":55},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":76},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ rest $ var : tt : $","highlight_start":1,"highlight_end":73},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [] @ rest $","highlight_start":1,"highlight_end":77},{"text":"        ($ rest) *","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest) =>","highlight_start":1,"highlight_end":32},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let $ ($ mut) * $ var = $ crate :: read_value !","highlight_start":1,"highlight_end":52},{"text":"    (@ source [$ source] @ kind [$ ($ kind) *]) ;","highlight_start":1,"highlight_end":50},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":51},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [$ ($ kind) *] @","highlight_start":1,"highlight_end":79},{"text":"     rest) ; $ crate :: input ! (@ from [$ source] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":74},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest $ tt : tt $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind","highlight_start":1,"highlight_end":62},{"text":"     [$ ($ kind) * $ tt] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":48},{"text":"} ; (from $ source : expr, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    # [allow (unused_variables, unused_mut)] let mut s = $ source ; $ crate ::","highlight_start":1,"highlight_end":79},{"text":"    input ! { @ from [& mut s] @ rest $ ($ rest) * }","highlight_start":1,"highlight_end":53},{"text":"} ; ($ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let mut locked_stdin = $ crate :: STDIN_SOURCE . lock () . expect","highlight_start":1,"highlight_end":70},{"text":"    (concat !","highlight_start":1,"highlight_end":14},{"text":"     (\"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":65},{"text":"      \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":72},{"text":"      \"Please report this issue from \",","highlight_start":1,"highlight_end":40},{"text":"      \"<https://github.com/statiolake/proconio-rs/issues>.\")) ; $ crate ::","highlight_start":1,"highlight_end":75},{"text":"    input ! { @ from [& mut * locked_stdin] @ rest $ ($ rest) * } drop","highlight_start":1,"highlight_end":71},{"text":"    (locked_stdin) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"<::proconio::input macros>","byte_start":0,"byte_end":1979,"line_start":1,"line_end":48,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"(@ from [$ source : expr] @ rest) => { } ;","highlight_start":1,"highlight_end":43},{"text":"(@ from [$ source : expr] @ rest mut $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":59},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [mut] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":79},{"text":"(@ from [$ source : expr] @ rest $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":55},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":76},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ rest $ var : tt : $","highlight_start":1,"highlight_end":73},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [] @ rest $","highlight_start":1,"highlight_end":77},{"text":"        ($ rest) *","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest) =>","highlight_start":1,"highlight_end":32},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let $ ($ mut) * $ var = $ crate :: read_value !","highlight_start":1,"highlight_end":52},{"text":"    (@ source [$ source] @ kind [$ ($ kind) *]) ;","highlight_start":1,"highlight_end":50},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":51},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [$ ($ kind) *] @","highlight_start":1,"highlight_end":79},{"text":"     rest) ; $ crate :: input ! (@ from [$ source] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":74},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest $ tt : tt $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind","highlight_start":1,"highlight_end":62},{"text":"     [$ ($ kind) * $ tt] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":48},{"text":"} ; (from $ source : expr, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    # [allow (unused_variables, unused_mut)] let mut s = $ source ; $ crate ::","highlight_start":1,"highlight_end":79},{"text":"    input ! { @ from [& mut s] @ rest $ ($ rest) * }","highlight_start":1,"highlight_end":53},{"text":"} ; ($ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let mut locked_stdin = $ crate :: STDIN_SOURCE . lock () . expect","highlight_start":1,"highlight_end":70},{"text":"    (concat !","highlight_start":1,"highlight_end":14},{"text":"     (\"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":65},{"text":"      \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":72},{"text":"      \"Please report this issue from \",","highlight_start":1,"highlight_end":40},{"text":"      \"<https://github.com/statiolake/proconio-rs/issues>.\")) ; $ crate ::","highlight_start":1,"highlight_end":75},{"text":"    input ! { @ from [& mut * locked_stdin] @ rest $ ($ rest) * } drop","highlight_start":1,"highlight_end":71},{"text":"    (locked_stdin) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::input!","def_site_span":{"file_name":"<::proconio::input macros>","byte_start":0,"byte_end":1979,"line_start":1,"line_end":48,"column_start":1,"column_end":4,"is_primary":false,"text":[{"text":"(@ from [$ source : expr] @ rest) => { } ;","highlight_start":1,"highlight_end":43},{"text":"(@ from [$ source : expr] @ rest mut $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":59},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [mut] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":79},{"text":"(@ from [$ source : expr] @ rest $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":55},{"text":"{ $ crate :: input ! { @ from [$ source] @ mut [] @ rest $ ($ rest) * } } ;","highlight_start":1,"highlight_end":76},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ rest $ var : tt : $","highlight_start":1,"highlight_end":73},{"text":" ($ rest : tt) *) =>","highlight_start":1,"highlight_end":21},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    {","highlight_start":1,"highlight_end":6},{"text":"        @ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [] @ rest $","highlight_start":1,"highlight_end":77},{"text":"        ($ rest) *","highlight_start":1,"highlight_end":19},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest) =>","highlight_start":1,"highlight_end":32},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let $ ($ mut) * $ var = $ crate :: read_value !","highlight_start":1,"highlight_end":52},{"text":"    (@ source [$ source] @ kind [$ ($ kind) *]) ;","highlight_start":1,"highlight_end":50},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":51},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind [$ ($ kind) *] @","highlight_start":1,"highlight_end":79},{"text":"     rest) ; $ crate :: input ! (@ from [$ source] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":74},{"text":"} ;","highlight_start":1,"highlight_end":4},{"text":"(@ from [$ source : expr] @ mut [$ ($ mut : tt) ?] @ var $ var : tt @ kind","highlight_start":1,"highlight_end":75},{"text":" [$ ($ kind : tt) *] @ rest $ tt : tt $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":60},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    $ crate :: input !","highlight_start":1,"highlight_end":23},{"text":"    (@ from [$ source] @ mut [$ ($ mut) *] @ var $ var @ kind","highlight_start":1,"highlight_end":62},{"text":"     [$ ($ kind) * $ tt] @ rest $ ($ rest) *) ;","highlight_start":1,"highlight_end":48},{"text":"} ; (from $ source : expr, $ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":49},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    # [allow (unused_variables, unused_mut)] let mut s = $ source ; $ crate ::","highlight_start":1,"highlight_end":79},{"text":"    input ! { @ from [& mut s] @ rest $ ($ rest) * }","highlight_start":1,"highlight_end":53},{"text":"} ; ($ ($ rest : tt) *) =>","highlight_start":1,"highlight_end":27},{"text":"{","highlight_start":1,"highlight_end":2},{"text":"    let mut locked_stdin = $ crate :: STDIN_SOURCE . lock () . expect","highlight_start":1,"highlight_end":70},{"text":"    (concat !","highlight_start":1,"highlight_end":14},{"text":"     (\"failed to lock the stdin; please re-run this program.  \",","highlight_start":1,"highlight_end":65},{"text":"      \"If this issue repeatedly occur, this is a bug in `proconio`.  \",","highlight_start":1,"highlight_end":72},{"text":"      \"Please report this issue from \",","highlight_start":1,"highlight_end":40},{"text":"      \"<https://github.com/statiolake/proconio-rs/issues>.\")) ; $ crate ::","highlight_start":1,"highlight_end":75},{"text":"    input ! { @ from [& mut * locked_stdin] @ rest $ ($ rest) * } drop","highlight_start":1,"highlight_end":71},{"text":"    (locked_stdin) ;","highlight_start":1,"highlight_end":21},{"text":"} ;","highlight_start":1,"highlight_end":4}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider adding a `#![recursion_limit=\"256\"]` attribute to your crate","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: recursion limit reached while expanding `$crate::input!`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/d.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    input!{\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        n: usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        k; usize,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding a `#![recursion_limit=\"256\"]` attribute to your crate\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
